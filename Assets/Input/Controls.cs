//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Chess"",
            ""id"": ""1c527b33-0512-46a9-ba1b-06d4f3288865"",
            ""actions"": [
                {
                    ""name"": ""LClick"",
                    ""type"": ""Button"",
                    ""id"": ""8e207859-d3d5-4129-b850-6004cfda56d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RClick"",
                    ""type"": ""Button"",
                    ""id"": ""d13a7201-b51e-42c2-ad89-9f61a4f0f909"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21e882cc-f64e-475d-9de0-1f64550cf3de"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c166d0fe-f78a-4ab0-b13f-62cd93b9bfb1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Chess
        m_Chess = asset.FindActionMap("Chess", throwIfNotFound: true);
        m_Chess_LClick = m_Chess.FindAction("LClick", throwIfNotFound: true);
        m_Chess_RClick = m_Chess.FindAction("RClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Chess
    private readonly InputActionMap m_Chess;
    private List<IChessActions> m_ChessActionsCallbackInterfaces = new List<IChessActions>();
    private readonly InputAction m_Chess_LClick;
    private readonly InputAction m_Chess_RClick;
    public struct ChessActions
    {
        private @Controls m_Wrapper;
        public ChessActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LClick => m_Wrapper.m_Chess_LClick;
        public InputAction @RClick => m_Wrapper.m_Chess_RClick;
        public InputActionMap Get() { return m_Wrapper.m_Chess; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChessActions set) { return set.Get(); }
        public void AddCallbacks(IChessActions instance)
        {
            if (instance == null || m_Wrapper.m_ChessActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChessActionsCallbackInterfaces.Add(instance);
            @LClick.started += instance.OnLClick;
            @LClick.performed += instance.OnLClick;
            @LClick.canceled += instance.OnLClick;
            @RClick.started += instance.OnRClick;
            @RClick.performed += instance.OnRClick;
            @RClick.canceled += instance.OnRClick;
        }

        private void UnregisterCallbacks(IChessActions instance)
        {
            @LClick.started -= instance.OnLClick;
            @LClick.performed -= instance.OnLClick;
            @LClick.canceled -= instance.OnLClick;
            @RClick.started -= instance.OnRClick;
            @RClick.performed -= instance.OnRClick;
            @RClick.canceled -= instance.OnRClick;
        }

        public void RemoveCallbacks(IChessActions instance)
        {
            if (m_Wrapper.m_ChessActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChessActions instance)
        {
            foreach (var item in m_Wrapper.m_ChessActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChessActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChessActions @Chess => new ChessActions(this);
    public interface IChessActions
    {
        void OnLClick(InputAction.CallbackContext context);
        void OnRClick(InputAction.CallbackContext context);
    }
}
